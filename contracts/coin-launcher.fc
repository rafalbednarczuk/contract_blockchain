;; include to have good IDE support

#include "imports/stdlib.fc";
#include "imports/params.fc";


int mint_message_value()  asm "10000000 PUSHINT"; ;; 0.01 TON
;; storage scheme
;; storage#_ total_supply:Coins admin_address:MsgAddress content:^Cell jetton_wallet_code:^Cell = Storage;

(cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_ref(), ;; minter_code
        ds~load_ref() ;; jetton_wallet_code
    );
}


cell pack_minter_data(cell content, cell jetton_wallet_code, slice admin_address) inline {
    slice zero_address = begin_cell().store_uint(0, 64).end_cell().begin_parse();
    return begin_cell()
        .store_coins(0) ;; initial total_supply
        .store_slice(admin_address) ;; admin_address
        .store_ref(content) ;; content (metadata link)
        .store_ref(jetton_wallet_code) ;; jetton wallet code
        .end_cell();
}

cell calculate_minter_state_init(cell jetton_wallet_code, cell minter_code, cell content, slice admin_address) inline {
    return begin_cell()
        .store_uint(0, 2)
        .store_dict(minter_code)
        .store_dict(pack_minter_data(content, jetton_wallet_code, admin_address))
        .store_uint(0, 1)
        .end_cell();
}

slice calculate_minter_address(cell state_init) inline {
    return begin_cell().store_uint(4, 3)
        .store_int(workchain(), 8)
        .store_uint(cell_hash(state_init), 256)
        .end_cell()
        .begin_parse();
}




() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    (cell minter_code, cell jetton_wallet_code) = load_data();
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages if already deployed
        return ();
    }

    if (flags & 1) {
        ;; ignore all bounced messages
        return ();
    }
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    ;; int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

    int op = in_msg_body~load_uint(32);

    if (op == 1) {
        throw_unless(806, msg_value > 15 * mint_message_value());
        cell content = in_msg_body~load_ref();
        cell creatorAddress = begin_cell().store_slice(sender_address).end_cell();
        cell state_init = calculate_minter_state_init(jetton_wallet_code, minter_code, content, sender_address);
        slice minter_address = calculate_minter_address(state_init);
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(minter_address)
            .store_coins(11 * mint_message_value())
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(creatorAddress);
        send_raw_message(msg.end_cell(), 1);

        return ();
    }



    throw(0xffff);
}

