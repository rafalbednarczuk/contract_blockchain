;; include to have good IDE support

#include "imports/op-codes.fc";
#include "imports/stdlib.fc";
#include "imports/jetton-utils.fc";

;; Jettons discoverable smart contract

;; 6905(computational_gas_price) * 1000(cur_gas_price) = 6905000
;; ceil(6905000) = 10000000 ~= 0.01 TON
int provide_address_gas_consumption() asm "10000000 PUSHINT";

;; 1 Million coins with 9 decimal points
int total_jettons_amount() asm "1000000000000000 PUSHINT";

;; 10 TON
int total_tons_to_collect() asm "10000000000 PUSHINT";

int gas_consumption() asm "15000000 PUSHINT"; ;; 0.015 TON
int min_tons_for_storage() asm "10000000 PUSHINT"; ;; 0.01 TON

int minter_buy_and_sell_fees() asm "25000000 PUSHINT"; ;; 0.025 TON

int mint_message_value()  asm "50000000 PUSHINT"; ;; 0.05 TON
;; storage scheme
;; storage#_ total_supply:Coins admin_address:MsgAddress content:^Cell jetton_wallet_code:^Cell = Storage;

(int, slice, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_coins(), ;; total_supply
        ds~load_msg_addr(), ;; admin_address
        ds~load_ref(), ;; content
        ds~load_ref() ;; jetton_wallet_code
    );
}

() save_data(int total_supply, slice admin_address, cell content, cell jetton_wallet_code) impure inline {
    set_data(begin_cell()
        .store_coins(total_supply)
        .store_slice(admin_address)
        .store_ref(content)
        .store_ref(jetton_wallet_code)
        .end_cell()
    );
}

() mint_tokens(slice to_address, cell jetton_wallet_code, int amount, cell master_msg) impure {
    cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_wallet_address)
        .store_coins(amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(master_msg);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() purchase_coins_and_save_data(int total_supply, slice admin_address, cell content, cell jetton_wallet_code, int coins, slice to_address, int forward_amount) impure {
    int total_jettons = total_jettons_amount();
    int tons_to_collect = total_tons_to_collect();
    int jettons_amount = coins * total_jettons / tons_to_collect;

    var master_msg = begin_cell()
        .store_uint(op::internal_transfer(), 32)
        .store_uint(0, 64) ;; query_id
        .store_coins(jettons_amount)
        .store_slice(my_address()) ;; from_address
        .store_slice(to_address) ;; response_address
        .store_coins(forward_amount)
        .store_uint(0, 1) ;; forward_payload in this slice, not separate cell
        .end_cell();

    mint_tokens(to_address, jetton_wallet_code, mint_message_value(), master_msg);
    save_data(total_supply + jettons_amount, admin_address, content, jetton_wallet_code);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    ;;deploy
    ;;//TODO: problem if deployer doesn't provide enough money,
    ;;//TODO: check if he has enough money to make transaction to receive any tokens
    if (total_supply == 0) {
        ;;creator coins
        throw_unless(804, msg_value >= 3 * mint_message_value());
        purchase_coins_and_save_data(total_supply, admin_address, content, jetton_wallet_code, msg_value, sender_address, 1);
        int bonding_curve_coins = total_tons_to_collect() - msg_value;
        slice minter_address = my_address();
        ;;have to load total_supply again so it shows correct supply to ton explorers via get_jetton_data
        (total_supply, _, _, _) = load_data();
        ;;bonding curve coins
        purchase_coins_and_save_data(total_supply, admin_address, content, jetton_wallet_code, bonding_curve_coins, minter_address, 0);
        return ();
    }

    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages if already deployed
        return ();
    }

    if (flags & 1) {
        ;; ignore all bounced messages
        return ();
    }
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::buy_coins()) {
        int total_jettons = total_jettons_amount();
        int tons_to_collect = total_tons_to_collect();
        ;;//TODO: take into account fees and subtract them
        int jettons_amount = msg_value * total_jettons / tons_to_collect;

        slice to_owner_address = my_address();
        force_chain(to_owner_address);

        slice jetton_master_address = my_address();

        cell state_init = calculate_jetton_wallet_state_init(to_owner_address, jetton_master_address, jetton_wallet_code);
        slice bonding_curve_wallet_address = calculate_jetton_wallet_address(state_init);
        slice response_address = in_msg_body~load_msg_addr();
        cell custom_payload = in_msg_body~load_dict();
        int forward_ton_amount = in_msg_body~load_coins();
        slice minterAddress = my_address();
        ;; response address is receiving exess and it has to be minter address
        throw_unless(802, equal_slice_bits(response_address, minterAddress));
        ;; forward minimum possible to notify wallet
        throw_unless(803, forward_ton_amount == 1);
        throw_unless(708, slice_bits(in_msg_body) >= 1);
        slice either_forward_payload = in_msg_body;
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(bonding_curve_wallet_address)
            .store_coins(0)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init);
        var msg_body = begin_cell()
            .store_uint(op::transfer(), 32)
            .store_uint(query_id, 64)
            .store_coins(jettons_amount)
            .store_slice(sender_address)
            .store_slice(response_address)
            .store_dict(custom_payload)
            .store_coins(forward_ton_amount)
            .store_slice(either_forward_payload)
            .end_cell();

        msg = msg.store_ref(msg_body);
        int fwd_count = forward_ton_amount ? 2 : 1;
        throw_unless(709, msg_value >
        forward_ton_amount +
        ;; 3 messages: wal1->wal2,  wal2->owner, wal2->response
        ;; but last one is optional (it is ok if it fails)
        fwd_count * fwd_fee +
        (2 * gas_consumption() + min_tons_for_storage()));
        ;; universal message send fee calculation may be activated here
        ;; by using this instead of fwd_fee
        ;; msg_fwd_fee(to_wallet, msg_body, state_init, 15)

        send_raw_message(msg.end_cell(), 64); ;; revert on errors

        return ();
    }

    if (op == op::burn_notification()) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        throw_unless(74,
            equal_slice_bits(calculate_user_jetton_wallet_address(from_address, my_address(), jetton_wallet_code), sender_address)
        );
        save_data(total_supply - jetton_amount, admin_address, content, jetton_wallet_code);
        slice response_address = in_msg_body~load_msg_addr();
        if (response_address.preload_uint(2) != 0) {
            var msg = begin_cell()
                .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
                .store_slice(response_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op::excesses(), 32)
                .store_uint(query_id, 64);
            send_raw_message(msg.end_cell(), 2 + 64);
        }
        return ();
    }

    if (op == op::provide_wallet_address()) {
        throw_unless(75, msg_value > fwd_fee + provide_address_gas_consumption());

        slice owner_address = in_msg_body~load_msg_addr();
        int include_address? = in_msg_body~load_uint(1);

        cell included_address = include_address?
        ? begin_cell().store_slice(owner_address).end_cell()
        : null();

        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::take_wallet_address(), 32)
            .store_uint(query_id, 64);

        if (is_resolvable?(owner_address)) {
            msg = msg.store_slice(calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code));
        } else {
            msg = msg.store_uint(0, 2); ;; addr_none
        }
        send_raw_message(msg.store_maybe_ref(included_address).end_cell(), 64);
        return ();
    }

    ;; handle coins sell
    if (op == op::transfer_notification()) {
        slice minter_contract_address = my_address();
        slice minter_contract_jetton_address = calculate_user_jetton_wallet_address(minter_contract_address, minter_contract_address, jetton_wallet_code);
        ;; accept message only from jetton wallet linked to minter contract
        throw_unless(801, equal_slice_bits(sender_address, minter_contract_jetton_address));
        int jettons_amount = in_msg_body~load_coins();
        slice seller_address = in_msg_body~load_msg_addr();
        int total_jettons = total_jettons_amount();
        int tons_to_collect = total_tons_to_collect();
        int tons_amount = jettons_amount * tons_to_collect / total_jettons;
        tons_amount -= minter_buy_and_sell_fees(); ;; subtract fees so minter balance can stay > 0
        ;; //TODO: save 1% of transaction
        cell msg_body = begin_cell()
            .store_uint(0, 32)
            .store_uint(query_id, 64)
            .end_cell();
        cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(seller_address)
            .store_coins(tons_amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(msg_body)
            .end_cell();
        send_raw_message(msg, 64);
        return ();

    }

    ;;excess when someone sales jettons
    if (op == op::excesses()) {
        return ();
    }

    throw(0xffff);
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    return (total_supply, -1, admin_address, content, jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}
