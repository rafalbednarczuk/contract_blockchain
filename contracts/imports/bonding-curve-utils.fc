#include "stdlib.fc";

;; f(J) = 0.0005T +  0.000000003 * J * 1T ;; T == 1 TON; J == 1 Jetton
;; At 1 Million Jettons, Total is 2000 TON.
;; Starting pirce is 0.0005T/Jetton, 1 Million Jetton price is 0.0035T/Jetton
;; V(J) = 0.0005J * 1T + 0.5J * [f(J) - 0.0005]
;; V stands for ton amount bought from 0 to J including.

int one_ton() asm "1000000000 PUSHINT";
int one_jetton() asm "1000000000 PUSHINT";

int bc::calculate_price_in_grams_for_jetton(int jettons_nano) {
    int ton = one_ton();
    return ton / 2000 + jettons_nano / 333333333;
}

int bc::calculate_volume_in_grams(int jettons_nano) {
    int ton = one_ton();
    return ton / 2000 * jettons_nano / one_jetton() + jettons_nano * (bc::calculate_price_in_grams_for_jetton(jettons_nano) - ton / 2000) / 2 / one_jetton();
}

int bc::calculate_ton_amount(int total_jettons_sold_nano, int jettons_amount_nano) {
    int start_volume = bc::calculate_volume_in_grams(total_jettons_sold_nano);
    int end_volume = bc::calculate_volume_in_grams(total_jettons_sold_nano + jettons_amount_nano);
    return end_volume - start_volume;
}

;; max 1B JETTON
int bc::calculate_jetton_amount(int total_jettons_sold_nano, int ton_amount_nano) {
    int ton = one_ton();
    int low = total_jettons_sold_nano;
    int high = total_jettons_sold_nano + ton * 1000000000;

    while (low < high) {
        int mid = (low + high + 1) / 2;
        int mid_ton_amount = bc::calculate_ton_amount(total_jettons_sold_nano, mid);

        if (mid_ton_amount <= ton_amount_nano) {
            low = mid;
        } else {
            high = mid - 1;
        }
    }
    return low;
}

int math::cbrt(int x) {
    if (x == 0) {
        return 0;
    }

    ;; Handle negative numbers
    int sign = 1;
    if (x < 0) {
        x = -1 * x;
        sign = -1;
    }

    ;; Minimum of [cubicRoot(MAX_INT) - 1] and x
    int low = min(x, 0);
    int high = min(x, 48740834812604276470692693);

    while (low < high) {
        int mid = (low + high + 1) / 2;

        int mid_cubed = mid * mid * mid;

        if (mid_cubed <= x) {
            low = mid;
        } else {
            high = mid - 1;
        }
    }

    return low * sign;
}
