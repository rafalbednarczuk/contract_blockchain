;; include to have good IDE support

#include "./imports/op-codes.fc";
#include "./imports/stdlib.fc";
#include "./imports/jetton-utils.fc";
#include "./imports/bonding-curve-utils.fc";
#include "./dex/stonfi.fc";

;; Jettons minter market with bonding curve ending up on stonfi

;; 6905(computational_gas_price) * 1000(cur_gas_price) = 6905000
;; ceil(6905000) = 10000000 ~= 0.01 TONs
int provide_address_gas_consumption() asm "10000000 PUSHINT";
int min_tons_for_storage() asm "100000000 PUSHINT"; ;; 0.1 TON
int min_tons_for_purchase() asm "100000000 PUSHINT"; ;; 0.1 TON
int buy_fee() asm "15000000 PUSHINT"; ;; 0.15 TON
int sell_fee() asm "15000000 PUSHINT"; ;; 0.15 TON
int bonding_curve_jettons() asm "1000000000000000 PUSHINT"; ;; 1.000.000 jettons


(int, slice, cell, cell, int, slice, slice) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_coins(), ;; total_supply
        ds~load_msg_addr(), ;; admin_address
        ds~load_ref(), ;; content
        ds~load_ref(), ;; jetton_wallet_code
        ds~load_uint(1), ;; bc_reached
        ds~load_msg_addr(), ;; router_address
        ds~load_msg_addr() ;; router_pton_wallet_address
    );
}

() save_data(int total_supply, slice admin_address, cell content, cell jetton_wallet_code, int bc_reached, slice router_address, slice router_pton_wallet_address) impure inline {
    set_data(begin_cell()
        .store_coins(total_supply)
        .store_slice(admin_address)
        .store_ref(content)
        .store_ref(jetton_wallet_code)
        .store_uint(bc_reached, 1)
        .store_slice(router_address)
        .store_slice(router_pton_wallet_address)
        .end_cell()
    );
}

() mint_tokens(slice to_address, cell jetton_wallet_code, int amount, cell master_msg) impure {
    cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_wallet_address)
        .store_coins(amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(master_msg);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code, int bc_reached, slice router_address, slice router_pton_wallet_address) = load_data();

    if (op == op::buy_coins()) {
        throw_unless(80, msg_value >= buy_fee() + min_tons_for_purchase());
        throw_if(199, bc_reached);
        int msg_value_minus_fee = msg_value - buy_fee();
        ;; 0.5% fee
        msg_value_minus_fee = muldiv(msg_value_minus_fee, 995, 1000);
        int jettons_amount = bc::calculate_bought_jetton_amount_for_ton(total_supply, msg_value_minus_fee);
        cell state_init = calculate_jetton_wallet_state_init(sender_address, my_address(), jetton_wallet_code);
        slice to_address = calculate_jetton_wallet_address(state_init);

        slice excess_address = my_address();
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(to_address)
            .store_coins(min_tons_for_purchase() / 2)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init);
        var msg_body = begin_cell()
            .store_uint(op::internal_transfer(), 32)
            .store_uint(query_id, 64)
            .store_coins(jettons_amount)
            .store_slice(sender_address)
            .store_slice(excess_address)
            .store_coins(1)
            .store_slice(begin_cell().end_cell().begin_parse())
            .end_cell();

        msg = msg.store_ref(msg_body);

        send_raw_message(msg.end_cell(), 1);

        total_supply += jettons_amount;

        if (total_supply >= bonding_curve_jettons()) {
            bc_reached = 1;
        } else {
            bc_reached = 0;
        }

        if (bc_reached) {

            ;; minimum 2000 TON
            int wholeBondingCurve = bc::calculate_ton_amount_for_sold_jetton(total_supply, total_supply);
            int ton_liq = wholeBondingCurve - gas::total_lp_provide_gas;
            ;; bonding curve ends at 0.0045 TON on 1 Jetton
            ;; make stonfi price at 0.005 TON on 1 Jetton
            ;; ton_liq  / jettons_liq  = 0.005
            ;; jettons_liq = ton_liq / 0.005
            int jettons_liq = muldiv(ton_liq, 1000, 5);
            ;; Send Jetton part of liq
            provide_jetton_lp(jettons_liq, jetton_wallet_code, router_address, router_pton_wallet_address);
            ;; Increase total supply
            total_supply += jettons_liq;

            ;; Send TON part of liq
            provide_ton_lp(ton_liq, jetton_wallet_code, router_address, router_pton_wallet_address);

            ;; Send all remaining, except min_tons_for_storage(), tons to admin
            raw_reserve(min_tons_for_storage(), 2);

            var msg = begin_cell()
                .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000
                .store_slice(admin_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op::excesses(), 32)
                .store_uint(query_id, 64);
            send_raw_message(msg.end_cell(), 128 + 2);
        }
        save_data(total_supply, admin_address, content, jetton_wallet_code, bc_reached, router_address, router_pton_wallet_address);
        return ();
    }

    if (op == op::burn_notification()) {
        int jettons_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        throw_unless(74,
            equal_slice_bits(calculate_user_jetton_wallet_address(from_address, my_address(), jetton_wallet_code), sender_address)
        );
        throw_if(199, bc_reached);
        slice response_address = in_msg_body~load_msg_addr();
        int ton_amount = bc::calculate_ton_amount_for_sold_jetton(total_supply, jettons_amount);
        ;; 0.5% fee
        int ton_amount_minus_fees = muldiv(ton_amount - sell_fee(), 995, 1000);
        save_data(total_supply - jettons_amount, admin_address, content, jetton_wallet_code, bc_reached, router_address, router_pton_wallet_address);
        if (response_address.preload_uint(2) != 0) {
            var msg = begin_cell()
                .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
                .store_slice(response_address)
                .store_coins(ton_amount_minus_fees)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op::excesses(), 32)
                .store_uint(query_id, 64);
            send_raw_message(msg.end_cell(), 64);
        }
        return ();
    }

    if (op == op::provide_wallet_address()) {
        throw_unless(75, msg_value > fwd_fee + provide_address_gas_consumption());

        slice owner_address = in_msg_body~load_msg_addr();
        int include_address? = in_msg_body~load_uint(1);

        cell included_address = include_address?
        ? begin_cell().store_slice(owner_address).end_cell()
        : null();

        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::take_wallet_address(), 32)
            .store_uint(query_id, 64);

        if (is_resolvable?(owner_address)) {
            msg = msg.store_slice(calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code));
        } else {
            msg = msg.store_uint(0, 2); ;; addr_none
        }
        send_raw_message(msg.store_maybe_ref(included_address).end_cell(), 64);
        return ();
    }

    if (op == 3) {
        ;; change admin
        throw_unless(73, equal_slice_bits(sender_address, admin_address));
        slice new_admin_address = in_msg_body~load_msg_addr();
        save_data(total_supply, admin_address, content, jetton_wallet_code, bc_reached, router_address, router_pton_wallet_address);
        return ();
    }

    if (op == 4) {
        ;; change router and pton pool
        throw_unless(73, equal_slice_bits(sender_address, admin_address));
        throw_if(199, bc_reached);
        slice new_router_address = in_msg_body~load_msg_addr();
        slice new_router_pton_wallet_address = in_msg_body~load_msg_addr();
        save_data(total_supply, admin_address, content, jetton_wallet_code, bc_reached, new_router_address, new_router_pton_wallet_address);
        return ();
    }

    if (op == op::excesses()) {
        return ();
    }

    if (op == op::withdraw_fees()) {
        throw_unless(73, equal_slice_bits(sender_address, admin_address));
        slice withdraw_fees_address = in_msg_body~load_msg_addr();
        int funds_to_secure = bc::calculate_ton_amount_for_sold_jetton(total_supply, total_supply);
        funds_to_secure += min_tons_for_storage();
        int ton_balance_before_msg = my_balance - msg_value;
        int fees_to_withdraw = ton_balance_before_msg - funds_to_secure;
        if (fees_to_withdraw <= 0) {
            return ();
        }
        var msg = begin_cell()
            .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
            .store_slice(withdraw_fees_address)
            .store_coins(fees_to_withdraw)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses(), 32)
            .store_uint(query_id, 64);
        send_raw_message(msg.end_cell(), 64);
        return ();
    }


    throw(0xffff);
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code, int bc_reached, slice router_address, slice router_pton_wallet_address) = load_data();
    int return_suply = 0;
    if (bc_reached) {
        return_suply = total_supply;
    } else {
        return_suply = bonding_curve_jettons();
    }
    return (return_suply, -1, admin_address, content, jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code, int bc_reached, slice router_address, slice router_pton_wallet_address) = load_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}

int coin_price() method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code, int bc_reached, slice router_address, slice router_pton_wallet_address) = load_data();
    return bc::calculate_price_in_grams_for_jetton(total_supply);
}

int coins_for_tons(int tons) method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code, int bc_reached, slice router_address, slice router_pton_wallet_address) = load_data();
    return bc::calculate_bought_jetton_amount_for_ton(total_supply, tons);
}

int tons_for_coins(int coins) method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code, int bc_reached, slice router_address, slice router_pton_wallet_address) = load_data();
    return bc::calculate_ton_amount_for_sold_jetton(total_supply, coins);
}

int bc_reached() method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code, int bc_reached, slice router_address, slice router_pton_wallet_address) = load_data();
    return bc_reached;
}

(int, slice, cell, cell, int, slice, slice) get_contract_storage() method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code, int bc_reached, slice router_address, slice router_pton_wallet_address) = load_data();
    return (total_supply, admin_address, content, jetton_wallet_code, bc_reached, router_address, router_pton_wallet_address);
}

int get_ton_balance() method_id {
    [int balance, cell other_currencies] = get_balance();
    return balance;
}

