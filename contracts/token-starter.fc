#include "imports/stdlib.fc";
#include "imports/jetton-utils.fc";

const const::min_tons_for_storage = 10000000; ;;0.01 TON

slice load_data() inline {
    var ds = get_data().begin_parse();
    return ds~load_msg_addr(); ;; master address
}

() save_data(slice master_address) impure inline {
    set_data(begin_cell()
        .store_slice(master_address)
        .end_cell()
    );
}

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }
    slice cs = in_msg.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    int coins = cs~load_coins();

    int op = in_msg_body~load_uint(32);

    var (master_address) = load_data();

    if (op == 2) {
        return ();
    }


    ;; Test to create jetton contract for a specific user
    ;; //TODO: Create memecoin buy/sell contract in addition to
    ;; //TODO: creating memcoins for the owner
    if (op == 1) {

        ;; TODO: Calculate if there is enough gas + like $1 to launch a coin
        slice to_address = in_msg_body~load_msg_addr();
        int ton_amount = in_msg_body~load_coins();
        cell jetton_wallet_code = in_msg_body~load_ref();
        cell master_msg = in_msg_body~load_ref();

        cell state_init = calculate_jetton_wallet_state_init(to_address, master_address, jetton_wallet_code);
        slice to_wallet_address = calculate_jetton_wallet_address(state_init);
        cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(to_wallet_address)
            .store_coins(ton_amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            ;; .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(state_init)
            .store_ref(master_msg)
            .end_cell();
            send_raw_message(msg, 1);
        ~dump(456);
        ~dump("sent");
        return ();
    }


    throw(777);
}



slice get_contract_storage_data() method_id {
    var master_address = load_data();
    return master_address;
}

int balance() method_id {
    var [balance, _] = get_balance();
    return balance;
}

slice get_wallet_address(slice owner_address, cell jetton_wallet_code) method_id {
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}

